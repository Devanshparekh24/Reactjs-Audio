  // Handle Camera
  const handleCamera = async () => {
    if (!meeting) return;
    try {
      if (isCamera) {
        console.log("camera is on");

        // Request access to the user's camera
        const stream = await navigator.mediaDevices.getUserMedia({
          video: true,
        });

        // Assuming you have a video element to display the stream
        const videoElement = document.createElement("video");
        videoElement.srcObject = stream;
        videoElement.play();

        // Optionally, append the video element to the DOM (e.g., a div or similar)
        document.body.appendChild(videoElement);
      } else {
        console.log("camera is off");
        // Stop video stream (optional clean-up, depending on the implementation)
        const videoTracks = document
          .querySelector("video")
          ?.srcObject?.getTracks();
        if (videoTracks) {
          videoTracks.forEach((track) => track.stop());
        }
      }
      setIsCamera(!isCamera); // Toggle the camera state
    } catch (error) {
      console.log("Error in video", error);
    }
  };













     {/* Camera-icon */}
                <button
                  className={`p-3 rounded-full ${
                    isCamera
                      ? "bg-red-100 text-red-600"
                      : "bg-gray-100 text-gray-600"
                  } hover:bg-gray-200`}
                  onClick={handleCamera}
                >
                  {isCamera ? <CameraOff /> : <Camera />}
                </button>